// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: items.query.sql

package items

import (
	"context"
)

const countTotalItems = `-- name: CountTotalItems :one
SELECT count(*) FROM items
`

func (q *Queries) CountTotalItems(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTotalItems)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createItem = `-- name: CreateItem :one
INSERT INTO items(name, qty, weight)
VALUES ($1, $2, $3) RETURNING id, name, qty, weight
`

type CreateItemParams struct {
	Name   string  `json:"name"`
	Qty    int32   `json:"qty"`
	Weight float64 `json:"weight"`
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createItem, arg.Name, arg.Qty, arg.Weight)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Qty,
		&i.Weight,
	)
	return i, err
}

const deleteItemById = `-- name: DeleteItemById :exec
DELETE FROM items WHERE id = $1
`

func (q *Queries) DeleteItemById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteItemById, id)
	return err
}

const getItemById = `-- name: GetItemById :one
SELECT id, name, qty, weight FROM items WHERE id = $1
`

func (q *Queries) GetItemById(ctx context.Context, id int32) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItemById, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Qty,
		&i.Weight,
	)
	return i, err
}

const getItems = `-- name: GetItems :many
SELECT id, name, qty, weight FROM items limit 50
`

func (q *Queries) GetItems(ctx context.Context) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Qty,
			&i.Weight,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItemById = `-- name: UpdateItemById :one
UPDATE items 
SET
    name = $1,
    qty = $2,
    weight = $3
WHERE 
    id = $4
RETURNING id, name, qty, weight
`

type UpdateItemByIdParams struct {
	Name   string  `json:"name"`
	Qty    int32   `json:"qty"`
	Weight float64 `json:"weight"`
	ID     int32   `json:"id"`
}

func (q *Queries) UpdateItemById(ctx context.Context, arg UpdateItemByIdParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, updateItemById,
		arg.Name,
		arg.Qty,
		arg.Weight,
		arg.ID,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Qty,
		&i.Weight,
	)
	return i, err
}
