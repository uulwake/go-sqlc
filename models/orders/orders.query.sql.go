// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: orders.query.sql

package orders

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (recipient_name, recipient_address, shipper)
VALUES ($1, $2, $3) RETURNING id, recipient_name, recipient_address, shipper
`

type CreateOrderParams struct {
	RecipientName    string `json:"recipient_name"`
	RecipientAddress string `json:"recipient_address"`
	Shipper          string `json:"shipper"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder, arg.RecipientName, arg.RecipientAddress, arg.Shipper)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.RecipientName,
		&i.RecipientAddress,
		&i.Shipper,
	)
	return i, err
}

const getOrder = `-- name: GetOrder :one
SELECT id, recipient_name, recipient_address, shipper FROM orders WHERE id = $1
`

func (q *Queries) GetOrder(ctx context.Context, id int32) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.RecipientName,
		&i.RecipientAddress,
		&i.Shipper,
	)
	return i, err
}

const getOrders = `-- name: GetOrders :many
SELECT id, recipient_name, recipient_address, shipper FROM orders limit 50
`

func (q *Queries) GetOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.RecipientName,
			&i.RecipientAddress,
			&i.Shipper,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
